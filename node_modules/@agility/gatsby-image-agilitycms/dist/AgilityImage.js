"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgilityImage = void 0;
var React = __importStar(require("react"));
var gatsby_plugin_image_1 = require("gatsby-plugin-image");
function urlBuilder(_a) {
    var baseUrl = _a.baseUrl, width = _a.width, height = _a.height, format = _a.format, options = _a.options;
    //console.log("url builder", { baseUrl, width, height, format, options })
    return baseUrl + "?w=" + width + "&h=" + height;
}
var getAgilityImageData = function (_a) {
    var image = _a.image, width = _a.width, height = _a.height, layout = _a.layout, backgroundColor = _a.backgroundColor, breakpoints = _a.breakpoints, formats = _a.formats, aspectRatio = _a.aspectRatio, options = _a.options;
    return gatsby_plugin_image_1.getImageData({
        baseUrl: image.url,
        sourceWidth: image.width,
        sourceHeight: image.height,
        width: width,
        height: height,
        layout: layout,
        backgroundColor: backgroundColor,
        breakpoints: breakpoints,
        formats: formats,
        aspectRatio: aspectRatio,
        options: options,
        urlBuilder: urlBuilder,
        pluginName: "gatsby-agility-image",
        // TODO: when we support auto-format/content negotiation, pass this as the formats array
        //formats: ["auto"],
        placeholderURL: image.url + "?w=" + 20 + "&q=60",
    });
};
var AgilityImage = function (_a) {
    var image = _a.image, width = _a.width, height = _a.height, layout = _a.layout, backgroundColor = _a.backgroundColor, sizes = _a.sizes, aspectRatio = _a.aspectRatio, options = _a.options, formats = _a.formats, breakpoints = _a.breakpoints, props = __rest(_a, ["image", "width", "height", "layout", "backgroundColor", "sizes", "aspectRatio", "options", "formats", "breakpoints"]);
    var imageData = getAgilityImageData({ image: image,
        width: width,
        height: height,
        layout: layout,
        backgroundColor: backgroundColor,
        formats: formats,
        breakpoints: breakpoints,
        aspectRatio: aspectRatio,
        options: options });
    var alt = image.label || props.alt || "";
    return React.createElement(gatsby_plugin_image_1.GatsbyImage, __assign({ image: imageData, alt: alt }, props));
};
exports.AgilityImage = AgilityImage;
module.exports = {
    AgilityImage: exports.AgilityImage
};
